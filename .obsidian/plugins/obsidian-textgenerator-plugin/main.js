/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => TextGeneratorPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var EXCALIDRAW_ICON = `<g transform="translate(30,0)"><path d="M5.81,27.19a1,1,0,0,1-.71-.29A1,1,0,0,1,4.82,26l1.26-8.33a1,1,0,0,1,.28-.56L18.54,5a3.08,3.08,0,0,1,4.24,0L27,9.22a3,3,0,0,1,0,4.24L14.85,25.64a1,1,0,0,1-.56.28L6,27.18ZM8,18.34,7,25l6.66-1,12-11.94a1,1,0,0,0,.29-.71,1,1,0,0,0-.29-.7L21.36,6.39a1,1,0,0,0-1.41,0Z"/><path d="M24.9,15.17a1,1,0,0,1-.71-.29L17.12,7.81a1,1,0,1,1,1.42-1.42l7.07,7.07a1,1,0,0,1,0,1.42A1,1,0,0,1,24.9,15.17Z"/><path d="M25,30H5a1,1,0,0,1,0-2H25a1,1,0,0,1,0,2Z"/><path d="M11.46,14.83,6.38,19.77c-1.18,1.17-.74,4.25.43,5.42s4.37,1.46,5.54.29l6-6.1s-5.73,2.56-7.07,1.06S11.46,14.83,11.46,14.83Z"/></g>`;
var pencil_icon = `<defs><style>.cls-1{fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:4px;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="VECTOR"><rect class="cls-1" x="74.98" y="21.55" width="18.9" height="37.59"/><path class="cls-1" d="M38.44,27.66a8,8,0,0,0-8.26,1.89L24.8,34.86a25.44,25.44,0,0,0-6,9.3L14.14,56.83C11.33,64.7,18.53,67.3,21,60.9" transform="translate(-1.93 -15.75)"/><polyline class="cls-1" points="74.98 25.58 56.61 18.72 46.72 15.45"/><path class="cls-1" d="M55.45,46.06,42.11,49.43,22.76,50.61c-8.27,1.3-5.51,11.67,4.88,12.8L46.5,65.78,53,68.4a23.65,23.65,0,0,0,17.9,0l6-2.46" transform="translate(-1.93 -15.75)"/><path class="cls-1" d="M37.07,64.58v5.91A3.49,3.49,0,0,1,33.65,74h0a3.49,3.49,0,0,1-3.45-3.52V64.58" transform="translate(-1.93 -15.75)"/><path class="cls-1" d="M48,66.58v5.68a3.4,3.4,0,0,1-3.34,3.46h0a3.4,3.4,0,0,1-3.34-3.45h0V65.58" transform="translate(-1.93 -15.75)"/><polyline class="cls-1" points="28.75 48.05 22.66 59.3 13.83 65.61 14.41 54.5 19.11 45.17"/><polyline class="cls-1" points="25.17 34.59 43.75 0.25 52.01 5.04 36.39 33.91"/><line class="cls-1" x1="0.25" y1="66.92" x2="13.83" y2="66.92"/></g></g>`;
var appPencile_icon = `<defs><style>.cls-1{fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:4px;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="VECTOR"><rect class="cls-1" x="77.39" y="35.84" width="18.9" height="37.59"/><path class="cls-1" d="M38.44,27.66a8,8,0,0,0-8.26,1.89L24.8,34.86a25.44,25.44,0,0,0-6,9.3L14.14,56.83C11.33,64.7,18.53,67.3,21,60.9" transform="translate(0.47 -1.45)"/><polyline class="cls-1" points="77.39 39.88 59.02 33.01 49.13 29.74"/><path class="cls-1" d="M55.45,46.06,42.11,49.43,22.76,50.61c-8.27,1.3-5.51,11.67,4.88,12.8L46.5,65.78,53,68.4a23.65,23.65,0,0,0,17.9,0l6-2.46" transform="translate(0.47 -1.45)"/><path class="cls-1" d="M37.07,64.58v5.91A3.49,3.49,0,0,1,33.65,74h0a3.49,3.49,0,0,1-3.45-3.52V64.58" transform="translate(0.47 -1.45)"/><path class="cls-1" d="M48,66.58v5.68a3.4,3.4,0,0,1-3.34,3.46h0a3.4,3.4,0,0,1-3.34-3.45h0V65.58" transform="translate(0.47 -1.45)"/><polyline class="cls-1" points="31.15 62.35 25.07 73.59 16.23 79.91 16.82 68.79 21.52 59.46"/><polyline class="cls-1" points="27.58 48.89 46.16 14.54 54.42 19.34 38.8 48.2"/><line class="cls-1" x1="2.66" y1="81.22" x2="16.24" y2="81.22"/></g></g><line class="cls-1" x1="25.78" y1="2" x2="39.9" y2="2"/><line class="cls-1" x1="47.36" y1="2" x2="61.47" y2="2"/><line class="cls-1" x1="3.17" y1="2" x2="17.28" y2="2"/><line class="cls-1" x1="24.62" y1="95.6" x2="38.73" y2="95.6"/><line class="cls-1" x1="46.19" y1="95.6" x2="60.31" y2="95.6"/><line class="cls-1" x1="2" y1="95.6" x2="16.11" y2="95.6"/>`;
var DEFAULT_SETTINGS = {
  api_key: "",
  engine: "text-davinci-002",
  max_tokens: 160,
  temperature: 0.7,
  frequency_penalty: 0.5,
  prompt: "",
  showStatusBar: true
};
var TextGeneratorPlugin = class extends import_obsidian.Plugin {
  getGeneratedText(reqParams) {
    return __async(this, null, function* () {
      const extractResult = reqParams == null ? void 0 : reqParams.extractResult;
      reqParams == null ? true : delete reqParams.extractResult;
      let requestResults;
      try {
        requestResults = JSON.parse(yield (0, import_obsidian.request)(reqParams));
      } catch (error) {
        console.log(error);
        return Promise.reject(error);
      }
      console.log(requestResults);
      const text = eval(extractResult);
      return text;
    });
  }
  getMetaData() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile !== null) {
      const cache = this.app.metadataCache.getCache(activeFile.path);
      if (cache.hasOwnProperty("frontmatter")) {
        return cache.frontmatter;
      }
    }
    return null;
  }
  getMetaDataAsStr(frontmatter) {
    let metadata = "";
    let keywords = ["config", "position", "bodyParams", "reqParams"];
    for (const [key, value] of Object.entries(frontmatter)) {
      if (keywords.findIndex((e) => e == key) != -1)
        continue;
      if (Array.isArray(value)) {
        metadata += `${key} : `;
        value.forEach((v) => {
          metadata += `${value}, `;
        });
        metadata += `
`;
      } else {
        metadata += `${key} : ${value} 
`;
      }
    }
    return metadata;
  }
  getActiveView() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView !== null) {
      return activeView;
    } else {
      new import_obsidian.Notice("The file type should be Markdown!");
      return null;
    }
  }
  insertGeneratedText(text2, editor) {
    let cursor = editor.getCursor();
    if (editor.listSelections().length > 0) {
      const anchor = editor.listSelections()[0].anchor;
      const head = editor.listSelections()[0].head;
      if (anchor.line > head.line || anchor.line === head.line && anchor.ch > head.ch) {
        cursor = editor.listSelections()[0].anchor;
      }
    }
    editor.replaceRange(text2, cursor);
  }
  prepareParameters(params, insertMetadata, editor) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    params = __spreadProps(__spreadValues({}, params), {
      prompt: this.getContext(editor)
    });
    let bodyParams = {
      "prompt": params.prompt,
      "max_tokens": params.max_tokens,
      "temperature": params.temperature,
      "frequency_penalty": params.frequency_penalty
    };
    let reqParams2 = {
      url: `https://api.openai.com/v1/engines/${params.engine}/completions`,
      method: "POST",
      body: "",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${params.api_key}`
      },
      extractResult: "requestResults?.choices[0].text"
    };
    if (insertMetadata) {
      const metadata = this.getMetaData();
      if (metadata == null) {
        new import_obsidian.Notice("No valid Metadata (YAML front matter) found!");
      } else {
        bodyParams.prompt = this.getMetaDataAsStr(metadata) + params.prompt;
        if (metadata["bodyParams"] && ((_b = (_a = metadata["config"]) == null ? void 0 : _a.append) == null ? void 0 : _b.bodyParams) == false) {
          bodyParams = metadata["bodyParams"];
        } else if (metadata["bodyParams"]) {
          bodyParams = __spreadValues(__spreadValues({}, bodyParams), metadata["bodyParams"]);
        }
        if (((_c = metadata["config"]) == null ? void 0 : _c.context) && ((_d = metadata["config"]) == null ? void 0 : _d.context) !== "prompt") {
          bodyParams[metadata["config"].context] = params.prompt;
          delete bodyParams.prompt;
        }
        reqParams2.body = JSON.stringify(bodyParams);
        if ((_e = metadata["config"]) == null ? void 0 : _e.output) {
          reqParams2.extractResult = (_f = metadata["config"]) == null ? void 0 : _f.output;
        }
        if (metadata["reqParams"] && ((_h = (_g = metadata["config"]) == null ? void 0 : _g.append) == null ? void 0 : _h.reqParams) == false) {
          reqParams2 = metadata["reqParams"];
        } else if (metadata["reqParams"]) {
          reqParams2 = __spreadValues(__spreadValues({}, reqParams2), metadata["reqParams"]);
        }
      }
    } else {
      reqParams2.body = JSON.stringify(bodyParams);
    }
    console.log(bodyParams);
    return reqParams2;
  }
  generate(params, insertMetadata = false, editor) {
    return __async(this, null, function* () {
      const parameters = this.prepareParameters(params, insertMetadata, editor);
      let text2;
      try {
        text2 = yield this.getGeneratedText(parameters);
      } catch (error) {
        return Promise.reject(error);
      }
      this.insertGeneratedText(text2, editor);
    });
  }
  getContext(editor) {
    let selectedText = editor.getSelection();
    if (selectedText.length === 0) {
      const lineNumber = editor.getCursor().line;
      selectedText = editor.getLine(lineNumber);
      if (selectedText.length === 0) {
        selectedText = editor.getValue();
      }
    }
    return selectedText;
  }
  updateStatusBar(text2) {
    let text22 = "";
    if (text2.length > 0) {
      text22 = `: ${text2}`;
    }
    if (this.settings.showStatusBar) {
      this.statusBarItemEl.setText(`Text Generator(${this.settings.max_tokens})${text22}`);
    }
  }
  onload() {
    return __async(this, null, function* () {
      (0, import_obsidian.addIcon)("pencil_icon", pencil_icon);
      (0, import_obsidian.addIcon)("appPencile_icon", appPencile_icon);
      yield this.loadSettings();
      this.statusBarItemEl = this.addStatusBarItem();
      const ribbonIconEl = this.addRibbonIcon("pencil_icon", "Generate Text!", (evt) => __async(this, null, function* () {
        const activeFile = this.app.workspace.getActiveFile();
        this.updateStatusBar(`processing... `);
        const activeView = this.getActiveView();
        if (activeView !== null) {
          const editor = activeView.editor;
          try {
            yield this.generate(this.settings, false, editor);
            this.updateStatusBar(``);
          } catch (error) {
            new import_obsidian.Notice("Text Generator Plugin: Error check console CTRL+SHIFT+I");
            this.updateStatusBar(`Error: Check Console`);
            setTimeout(() => this.updateStatusBar(``), 3e3);
          }
        }
      }));
      this.addCommand({
        id: "generate-text",
        name: "Generate Text!",
        icon: "pencil_icon",
        hotkeys: [{ modifiers: ["Ctrl"], key: "j" }],
        editorCallback: (editor) => __async(this, null, function* () {
          this.updateStatusBar(`processing... `);
          try {
            yield this.generate(this.settings, false, editor);
            this.updateStatusBar(``);
          } catch (error) {
            new import_obsidian.Notice("Text Generator Plugin: Error check console CTRL+SHIFT+I");
            this.updateStatusBar(`Error check console`);
            setTimeout(() => this.updateStatusBar(``), 3e3);
          }
        })
      });
      this.addCommand({
        id: "generate-text-with-metadata",
        name: "Generate Text (use Metadata))!",
        icon: "appPencile_icon",
        hotkeys: [{ modifiers: ["Ctrl", "Alt"], key: "j" }],
        editorCallback: (editor) => __async(this, null, function* () {
          this.updateStatusBar(`processing... `);
          try {
            yield this.generate(this.settings, true, editor);
            this.updateStatusBar(``);
          } catch (error) {
            new import_obsidian.Notice("Text Generator Plugin: Error check console CTRL+SHIFT+I");
            this.updateStatusBar(`Error check console`);
            setTimeout(() => this.updateStatusBar(``), 3e3);
          }
        })
      });
      this.addCommand({
        id: "increase-max_tokens",
        name: "Increase max_tokens by 10",
        hotkeys: [{ modifiers: ["Ctrl", "Alt"], key: "1" }],
        editorCallback: () => __async(this, null, function* () {
          this.settings.max_tokens += 10;
          yield this.saveSettings();
          this.updateStatusBar("");
        })
      });
      this.addCommand({
        id: "decrease-max_tokens",
        name: "decrease max_tokens by 10",
        hotkeys: [{ modifiers: ["Ctrl", "Alt"], key: "2" }],
        editorCallback: () => __async(this, null, function* () {
          this.settings.max_tokens -= 10;
          yield this.saveSettings();
          this.updateStatusBar("");
        })
      });
      this.addSettingTab(new TextGeneratorSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var TextGeneratorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const {
      containerEl
    } = this;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Settings for OpenAI."
    });
    new import_obsidian.Setting(containerEl).setName("api_key").setDesc("api_key").addText((text2) => text2.setPlaceholder("Enter your api_key").setValue(this.plugin.settings.api_key).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.api_key = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("engine").setDesc("engine").addDropdown((cb) => {
      cb.addOption("text-davinci-002", "text-davinci-002");
      cb.addOption("text-davinci-001", "text-davinci-001");
      cb.addOption("text-curie-001", "text-curie-001");
      cb.addOption("text-babbage-001", "text-babbage-001");
      cb.addOption("text-ada-001", "text-ada-001");
      cb.setValue(this.plugin.settings.engine);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.engine = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("max_tokens").setDesc("max_tokens").addText((text2) => text2.setPlaceholder("max_tokens").setValue(this.plugin.settings.max_tokens.toString()).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.max_tokens = parseInt(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("temperature").setDesc("temperature").addText((text2) => text2.setPlaceholder("temperature").setValue(this.plugin.settings.temperature.toString()).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.temperature = parseFloat(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("frequency_penalty").setDesc("frequency_penalty").addText((text2) => text2.setPlaceholder("frequency_penalty").setValue(this.plugin.settings.frequency_penalty.toString()).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.frequency_penalty = parseFloat(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("showStatusBar").setDesc("Show information in the Status Bar").addToggle((v) => v.setValue(this.plugin.settings.showStatusBar).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showStatusBar = value;
      yield this.plugin.saveSettings();
    })));
  }
};
